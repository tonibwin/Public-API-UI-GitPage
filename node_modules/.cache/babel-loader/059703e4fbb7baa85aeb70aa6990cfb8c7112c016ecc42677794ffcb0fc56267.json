{"ast":null,"code":"import PublicApiService from \"../services/public-api-service\";\nclass PublicApiManager {\n  static async getCategory(category) {\n    return await PublicApiService.getCategory(category).then(async entriesWrapper => {\n      return entriesWrapper === null || entriesWrapper === void 0 ? void 0 : entriesWrapper.entries;\n    });\n  }\n  static async getCategories() {\n    return await PublicApiService.getCategories().then(async categoriesWrapper => {\n      return categoriesWrapper === null || categoriesWrapper === void 0 ? void 0 : categoriesWrapper.categories;\n    });\n  }\n  static async getEntries() {\n    return await PublicApiService.getEntries().then(async entriesWrapper => {\n      return entriesWrapper === null || entriesWrapper === void 0 ? void 0 : entriesWrapper.entries;\n    });\n  }\n  static async getAPIsByCategories() {\n    //nested call to get all entries in every category, handles 429 errors\n    this.getCategories().then(async categories => {\n      let pack = 0;\n      let limit = 5;\n      const promises = [];\n      for (let category of categories) {\n        category = category.split(' ')[0];\n        promises.push(await fetch(`https://api.publicapis.org/entries?category=${category}`));\n        pack++;\n        if (pack == limit) {\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          pack = 0;\n        }\n      }\n      await Promise.all(promises).then(entriesWrappers => {\n        entriesWrappers.forEach(entriesWrapper => {\n          console.log(entriesWrapper);\n        });\n      });\n    });\n  }\n  static transformEntries(entries) {\n    let infoCards = [];\n    entries.forEach(entry => {\n      let infoCard = {\n        info: [{\n          key: 'Name',\n          showKey: false,\n          showValue: true,\n          value: entry.API,\n          variant: 'h5'\n        }, {\n          key: 'Description',\n          showKey: false,\n          showValue: true,\n          value: entry.Description,\n          variant: 'subtitle1'\n        }, {\n          key: 'Category',\n          showKey: false,\n          showValue: false,\n          value: entry.Category,\n          variant: 'subtitle1'\n        }],\n        link: entry.Link\n      };\n      infoCards.push(infoCard);\n    });\n    return infoCards;\n  }\n}\nexport default PublicApiManager;","map":{"version":3,"names":["PublicApiService","PublicApiManager","getCategory","category","then","entriesWrapper","entries","getCategories","categoriesWrapper","categories","getEntries","getAPIsByCategories","pack","limit","promises","split","push","fetch","Promise","resolve","setTimeout","all","entriesWrappers","forEach","console","log","transformEntries","infoCards","entry","infoCard","info","key","showKey","showValue","value","API","variant","Description","Category","link","Link"],"sources":["C:/Users/tonib/IdeaProjects/Public-API-UI/my-app/src/manager/public-api-manager.ts"],"sourcesContent":["import PublicApiService from \"../services/public-api-service\";\r\nimport Entry from \"../dtos/entry\";\r\nimport InformationCardInterface from \"../interfaces/information-card-interface\";\r\nimport EntriesWrapper from \"../dtos/entries-wrapper\";\r\n\r\n\r\nclass PublicApiManager {\r\n    public static async getCategory(category: string) {\r\n        return await PublicApiService.getCategory(category)\r\n            .then(async entriesWrapper => {\r\n                return entriesWrapper?.entries;\r\n            });\r\n    }\r\n\r\n    public static async getCategories() {\r\n        return await PublicApiService.getCategories()\r\n            .then(async categoriesWrapper => {\r\n                return categoriesWrapper?.categories;\r\n             });\r\n    }\r\n\r\n    public static async getEntries() {\r\n        return await PublicApiService.getEntries()\r\n            .then(async entriesWrapper => {\r\n                return entriesWrapper?.entries;\r\n            });\r\n    }\r\n\r\n\r\n    public static async getAPIsByCategories() {\r\n        //nested call to get all entries in every category, handles 429 errors\r\n        this.getCategories().then(async categories => {\r\n            let pack = 0;\r\n            let limit = 5;\r\n            const promises:any = [];\r\n            for(let category of categories) {\r\n                category = category.split(' ')[0];\r\n                promises.push(await fetch(`https://api.publicapis.org/entries?category=${category}`));\r\n\r\n                pack++;\r\n                if(pack == limit) {\r\n                    await new Promise((resolve: any) => setTimeout(resolve, 1000));\r\n                    pack = 0;\r\n                }\r\n            }\r\n\r\n            await Promise.all(promises).then((entriesWrappers) => {\r\n                entriesWrappers.forEach((entriesWrapper: Promise<EntriesWrapper>) => {\r\n                    console.log(entriesWrapper);\r\n                });\r\n            });\r\n        })\r\n    }\r\n\r\n    public static transformEntries(entries: Entry[]) {\r\n        let infoCards: InformationCardInterface[] = [];\r\n        entries.forEach(entry => {\r\n            let infoCard: InformationCardInterface = {\r\n                info:[\r\n                    {key:'Name', showKey:false, showValue:true, value: entry.API, variant: 'h5'},\r\n                    {key:'Description', showKey:false, showValue:true, value: entry.Description, variant: 'subtitle1'},\r\n                    {key:'Category', showKey:false, showValue:false, value: entry.Category, variant: 'subtitle1'}\r\n                ],\r\n                link: entry.Link\r\n            };\r\n            infoCards.push(infoCard);\r\n        });\r\n        return infoCards;\r\n    }\r\n}\r\nexport default PublicApiManager;"],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,gCAAgC;AAM7D,MAAMC,gBAAgB,CAAC;EACnB,aAAoBC,WAAWA,CAACC,QAAgB,EAAE;IAC9C,OAAO,MAAMH,gBAAgB,CAACE,WAAW,CAACC,QAAQ,CAAC,CAC9CC,IAAI,CAAC,MAAMC,cAAc,IAAI;MAC1B,OAAOA,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEC,OAAO;IAClC,CAAC,CAAC;EACV;EAEA,aAAoBC,aAAaA,CAAA,EAAG;IAChC,OAAO,MAAMP,gBAAgB,CAACO,aAAa,CAAC,CAAC,CACxCH,IAAI,CAAC,MAAMI,iBAAiB,IAAI;MAC7B,OAAOA,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEC,UAAU;IACvC,CAAC,CAAC;EACX;EAEA,aAAoBC,UAAUA,CAAA,EAAG;IAC7B,OAAO,MAAMV,gBAAgB,CAACU,UAAU,CAAC,CAAC,CACrCN,IAAI,CAAC,MAAMC,cAAc,IAAI;MAC1B,OAAOA,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEC,OAAO;IAClC,CAAC,CAAC;EACV;EAGA,aAAoBK,mBAAmBA,CAAA,EAAG;IACtC;IACA,IAAI,CAACJ,aAAa,CAAC,CAAC,CAACH,IAAI,CAAC,MAAMK,UAAU,IAAI;MAC1C,IAAIG,IAAI,GAAG,CAAC;MACZ,IAAIC,KAAK,GAAG,CAAC;MACb,MAAMC,QAAY,GAAG,EAAE;MACvB,KAAI,IAAIX,QAAQ,IAAIM,UAAU,EAAE;QAC5BN,QAAQ,GAAGA,QAAQ,CAACY,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjCD,QAAQ,CAACE,IAAI,CAAC,MAAMC,KAAK,CAAE,+CAA8Cd,QAAS,EAAC,CAAC,CAAC;QAErFS,IAAI,EAAE;QACN,IAAGA,IAAI,IAAIC,KAAK,EAAE;UACd,MAAM,IAAIK,OAAO,CAAEC,OAAY,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;UAC9DP,IAAI,GAAG,CAAC;QACZ;MACJ;MAEA,MAAMM,OAAO,CAACG,GAAG,CAACP,QAAQ,CAAC,CAACV,IAAI,CAAEkB,eAAe,IAAK;QAClDA,eAAe,CAACC,OAAO,CAAElB,cAAuC,IAAK;UACjEmB,OAAO,CAACC,GAAG,CAACpB,cAAc,CAAC;QAC/B,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EAEA,OAAcqB,gBAAgBA,CAACpB,OAAgB,EAAE;IAC7C,IAAIqB,SAAqC,GAAG,EAAE;IAC9CrB,OAAO,CAACiB,OAAO,CAACK,KAAK,IAAI;MACrB,IAAIC,QAAkC,GAAG;QACrCC,IAAI,EAAC,CACD;UAACC,GAAG,EAAC,MAAM;UAAEC,OAAO,EAAC,KAAK;UAAEC,SAAS,EAAC,IAAI;UAAEC,KAAK,EAAEN,KAAK,CAACO,GAAG;UAAEC,OAAO,EAAE;QAAI,CAAC,EAC5E;UAACL,GAAG,EAAC,aAAa;UAAEC,OAAO,EAAC,KAAK;UAAEC,SAAS,EAAC,IAAI;UAAEC,KAAK,EAAEN,KAAK,CAACS,WAAW;UAAED,OAAO,EAAE;QAAW,CAAC,EAClG;UAACL,GAAG,EAAC,UAAU;UAAEC,OAAO,EAAC,KAAK;UAAEC,SAAS,EAAC,KAAK;UAAEC,KAAK,EAAEN,KAAK,CAACU,QAAQ;UAAEF,OAAO,EAAE;QAAW,CAAC,CAChG;QACDG,IAAI,EAAEX,KAAK,CAACY;MAChB,CAAC;MACDb,SAAS,CAACX,IAAI,CAACa,QAAQ,CAAC;IAC5B,CAAC,CAAC;IACF,OAAOF,SAAS;EACpB;AACJ;AACA,eAAe1B,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}